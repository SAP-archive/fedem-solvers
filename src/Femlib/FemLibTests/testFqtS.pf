!! SPDX-FileCopyrightText: 2023 SAP SE
!!
!! SPDX-License-Identifier: Apache-2.0
!!
!! This file is part of FEDEM - https://openfedem.org
!!==============================================================================

!> @brief Unit tests for the linear thin shell elements.
!>
!> @author Knut Morten Okstad, SAP SE
!>
!> @date 6 Jul 2021

@test
subroutine testFQTS

  use kindModule       , only : dp
  use isoMatModule     , only : isoMat2D
  use denseMatrixModule, only : solveAxB, solveEigenvalues
  use manipMatrixModule, only : writeObject
  use reportErrorModule, only : setErrorFile
#if FT_PFUNIT > 3
  use funit, only : assertEqual, assertGreaterThan
  use funit, only : sourceLocation, anyExceptions
#else
  use pfunit_mod, only : assertEqual, assertGreaterThan
  use pfunit_mod, only : sourceLocation, anyExceptions
#endif

  implicit none

#ifdef FT_DEBUG
  integer , parameter :: IPSW = 9
#else
  integer , parameter :: IPSW = 0
#endif
  integer , parameter :: LPU = 6
  real(dp), parameter :: Emod  = 2.1e11_dp, nu = 0.3_dp, t = 0.01_dp
  real(dp), parameter :: alpha = 1.5_dp, beta = 0.5_dp

  integer  :: i, IEL, IERR
  real(dp) :: Th(4), Xg(4), Yg(4), Zg(4), E(3,3), EM3(18,18), EM4(24,24)
  real(dp) :: EK3(6,6), EK4(12,12), lambda(27), Rhs(12,1)
  real(dp) :: tolD, theta, Trot(3,3), dis3(3), disr(3)

  Th = t
  Xg = 0.0_dp
  Yg = 0.0_dp
  Zg = 0.0_dp
  call setErrorFile (LPU)

  !=============================================================================
  !! Nodal ordering for the 3-noded shell:
  !!    3
  !!    *
  !!    |\
  !!    | \
  !!    |  \
  !!    |   \
  !!    |    \
  !!    *-----*
  !!   1       2

  Xg(2) = 2.0_dp
  Yg(3) = 2.0_dp

  IEL = 1
  call isoMat2D (Emod,nu,E)
  call FTS31 (EM3(1,1),LAMBDA(1),EM4(1,1),E(1,1),XG(1),YG(1),ZG(1),TH(1), &
       &      ALPHA,BETA,IEL,LPU,IPSW,IERR)
  @assertEqual(0,IERR)

  !! Apply a load in node 3
  Rhs(1,1) =  300.0_dp
  Rhs(2,1) = 1000.0_dp
  Rhs(3,1) = 5000.0_dp
  Rhs(4:6,1) = 0.0_dp

  !! Solve for displacements while fixing node 1 and 2 (6x6 system)
  EK3 = EM3(13:18,13:18)
  call solveAxB (EK3,Rhs,IERR,6)
  @assertEqual(0,IERR)
  write(LPU,5) Rhs(1:6,1)
5 format(' Solution vector:'/(1P,5E13.5))

  tolD = maxval(Rhs(1:6,1))*1.0e-9
  dis3 = Rhs(1:3,1)
  write(LPU,7) dis3
7 format(' Under load point:',3F12.9)

  !! Check that the stiffness matrix has six (and only six) zero eigenvalues
  call solveEigenvalues (EM3,lambda,EM3,18,18,0,IERR)
  @assertEqual(0,IERR)
  call writeObject (lambda(1:18),LPU,' FTS31 eigenvalues')
  do i = 1, 6
     @assertEqual(0.0_dp,lambda(i),1.0e-5_dp)
  end do
  @assertGreaterThan(lambda(7),1.0_dp)

  !! Rotate the element 30 degrees about global X-axis
  Trot = 0.0_dp
  theta = acos(-1.0_dp)/6.0_dp
  Trot(1,1) = 1.0_dp
  Trot(2,2) = cos(theta)
  Trot(2,3) = sin(theta)
  Trot(3,2) = -Trot(2,3)
  Trot(3,3) =  Trot(2,2)
  call RotateElm (3,Xg,Yg,Zg,Trot)

  IEL = IEL + 1
  call FTS31 (EM3(1,1),LAMBDA(1),EM4(1,1),E(1,1),XG(1),YG(1),ZG(1),TH(1), &
       &      ALPHA,BETA,IEL,LPU,IPSW,IERR)
  @assertEqual(0,IERR)

  !! Apply a load in node 3
  Rhs(1:3,1) = matmul((/300.0_dp,1000.0_dp,5000.0_dp/),Trot)
  Rhs(4:6,1) = 0.0_dp

  !! Solve for displacements while fixing node 1 and 2 (6x6 system)
  EK3 = EM3(13:18,13:18)
  call solveAxB (EK3,Rhs,IERR)
  @assertEqual(0,IERR)
  write(LPU,6) truncTol(Rhs(1:6,1))
6 format(' Solution vector:'/(1P,6E13.5))

  disr = matmul(Trot,Rhs(1:3,1))
  write(LPU,7) disr

  @assertEqual(dis3(1),disr(1),tolD)
  @assertEqual(dis3(2),disr(2),tolD)
  @assertEqual(dis3(3),disr(3),tolD)

  !! Check that the stiffness matrix has six (and only six) zero eigenvalues
  call solveEigenvalues (EM3,lambda,EM3,18,18,0,IERR)
  @assertEqual(0,IERR)
  call writeObject (lambda(1:18),LPU,' FTS31 eigenvalues')
  do i = 1, 6
     @assertEqual(0.0_dp,lambda(i),1.0e-5_dp)
  end do
  @assertGreaterThan(lambda(7),1.0_dp)

  !=============================================================================
  !! Nodal ordering for the 4-noded shell:
  !!   4       3
  !!    *-----*
  !!    |     |
  !!    |     |
  !!    |     |
  !!    *-----*
  !!   1       2

  Xg(2:3) = 1.0_dp; Xg(4) = 0.0_dp
  Yg(3:4) = 1.0_dp; Yg(2) = 0.0_dp
  Zg      = 0.0_dp

  IEL = IEL + 1
  call FQS31(EM4(1,1),E(1,1),XG(1),YG(1),ZG(1),TH(1),ALPHA,BETA,IEL,LPU, &
       &     IPSW,IERR,Emod,nu)
  @assertEqual(0,IERR)

  !! Apply a load in node 3 and 4
  Rhs = 0.0_dp
  Rhs(1,1) =  300.0_dp
  Rhs(2,1) = 1000.0_dp
  Rhs(3,1) = 5000.0_dp
  Rhs(7,1) = -300.0_dp
  Rhs(8,1) = 1000.0_dp
  Rhs(9,1) = 5000.0_dp

  !! Solve for displacements while fixing node 1 and 2 (12x12 system)
  EK4 = EM4(13:24,13:24)
  call solveAxB (EK4,Rhs,IERR)
  @assertEqual(0,IERR)
  write(LPU,6) truncTol(Rhs)

  dis3 = Rhs(1:3,1)
  write(LPU,7) dis3

  !! Check that the stiffness matrix has six (and only six) zero eigenvalues
  call solveEigenvalues (EM4,lambda,EM4,24,24,0,IERR)
  @assertEqual(0,IERR)
  call writeObject (lambda(1:24),LPU,' FQS31 eigenvalues')
  do i = 1, 6
     @assertEqual(0.0_dp,lambda(i),1.0e-5_dp)
  end do
  @assertGreaterThan(lambda(7),1.0_dp)

  !! Rotate the element 30 degrees about global X-axis
  call RotateElm (4,Xg,Yg,Zg,Trot)

  IEL = IEL + 1
  call FQS31(EM4(1,1),E(1,1),XG(1),YG(1),ZG(1),TH(1),ALPHA,BETA,IEL,LPU, &
       &     IPSW,IERR,Emod,nu)
  @assertEqual(0,IERR)

  !! Apply a load in node 3 and 4
  Rhs = 0.0_dp
  Rhs(1:3,1) = matmul((/ 300.0_dp,1000.0_dp,5000.0_dp/),Trot)
  Rhs(7:9,1) = matmul((/-300.0_dp,1000.0_dp,5000.0_dp/),Trot)

  !! Solve for displacements
  EK4 = EM4(13:24,13:24)
  call solveAxB (EK4,Rhs,IERR)
  @assertEqual(0,IERR)
  write(LPU,6) truncTol(Rhs)

  disr = matmul(Trot,Rhs(1:3,1))
  write(LPU,7) disr

  @assertEqual(dis3(1),disr(1),tolD)
  @assertEqual(dis3(2),disr(2),tolD)
  @assertEqual(dis3(3),disr(3),tolD)

  !! Check that the stiffness matrix has six (and only six) zero eigenvalues
  call solveEigenvalues (EM4,lambda,EM4,24,24,0,IERR)
  @assertEqual(0,IERR)
  call writeObject (lambda(1:24),LPU,' FQS31 eigenvalues')
  do i = 1, 6
     @assertEqual(0.0_dp,lambda(i),1.0e-5_dp)
  end do
  @assertGreaterThan(lambda(7),1.0_dp)

contains

  !> @brief Transform the element node coordinates.
  subroutine RotateElm (N,Xg,Yg,Zg,Trot)
    integer , intent(in)    :: N
    real(dp), intent(inout) :: Xg(N), Yg(N), Zg(N)
    real(dp), intent(in)    :: Trot(3,3)
    integer  :: i
    real(dp) :: P(3), Q(3)
    do i = 1, N
       P(1) = Xg(i)
       P(2) = Yg(i)
       P(3) = Zg(i)
       Q = matmul(P,Trot)
       Xg(i) = Q(1)
       Yg(i) = Q(2)
       Zg(i) = Q(3)
    end do
  end subroutine RotateElm

  !> @brief Truncate small input values to zero.
  elemental function truncTol (x)
    real(dp), intent(in) :: x
    real(dp) :: truncTol
    if (abs(x) > tolD) then
       truncTol = x
    else
       truncTol = 0.0_dp
    end if
  end function truncTol

end subroutine testFQTS
